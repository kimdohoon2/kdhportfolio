/* ----- 수학 함수 구현부 ----- */
/* CSS에서 삼각함수 계산을 위한 수학 함수들 구현 */
$pi: 3.14159265359;
$_precision: 10;

/**
 * 거듭제곱 계산 함수
 * @param $base - 밑
 * @param $exp - 지수
 */
@function pow($base, $exp) {
  $value: $base;
  @if $exp > 1 {
    @for $i from 2 through $exp {
      $value: $value * $base;
    }
  }
  @if $exp < 1 {
    @for $i from 0 through -$exp {
      $value: $value / $base;
    }
  }
  @return $value;
}

/**
 * 팩토리얼 계산 함수
 * @param $num - 팩토리얼을 계산할 숫자
 */
@function fact($num) {
  $fact: 1;
  @if $num > 0 {
    @for $i from 1 through $num {
      $fact: $fact * $i;
    }
  }
  @return $fact;
}

/**
 * 각도를 라디안으로 변환하는 함수
 * @param $angle - 변환할 각도
 */
@function _to_unitless_rad($angle) {
  @if unit($angle) == "deg" {
    $angle: $angle / 180deg * $pi;
  }
  @if unit($angle) == "rad" {
    $angle: $angle / 1rad;
  }
  @return $angle;
}

/**
 * 사인(sine) 함수 - 테일러 급수를 사용하여 계산
 * @param $angle - 각도
 */
@function sin($angle) {
  $a: _to_unitless_rad($angle);
  $sin: $a;
  @for $n from 1 through $_precision {
    $sin: $sin + (pow(-1, $n) / fact(2 * $n + 1)) * pow($a, (2 * $n + 1));
  }
  @return $sin;
}

/**
 * 코사인(cosine) 함수 - 테일러 급수를 사용하여 계산
 * @param $angle - 각도
 */
@function cos($angle) {
  $a: _to_unitless_rad($angle);
  $cos: 1;
  @for $n from 1 through $_precision {
    $cos: $cos + (pow(-1, $n) / fact(2 * $n)) * pow($a, 2 * $n);
  }
  @return $cos;
}

/**
 * 탄젠트(tangent) 함수 - sin/cos로 계산
 * @param $angle - 각도
 */
@function tan($angle) {
  @return sin($angle) / cos($angle);
}

/**
 * 나머지 계산 함수
 * @param $origin - 나눠질 수
 * @param $mod - 나누는 수
 */
@function reminder($origin, $mod) {
  $q: if(($origin / $mod) > 0, floor($origin / $mod), ceil($origin / $mod));
  @return $origin - ($mod * $q);
}

/* ----- 별 배경 컨테이너 스타일 ----- */
.starBackground {
  width: 100%;
  height: 100%;
  background-color: black;
  position: absolute;
  top: 0;
  left: 0;
  z-index: 0;
}

/* ----- 별 스타일 ----- */
/**
 * 별의 기본 스타일
 * - 처음에는 투명(opacity: 0)
 * - 애니메이션을 통해 나타나고 이동
 */
.star {
  opacity: 0;
  position: absolute;
  background: white;
  box-shadow: 0px 0px 20px 0px rgb(255, 255, 255);
  border-radius: 100%;
  transform-origin: 0, 0;
  animation-timing-function: linear, linear !important;
  animation-iteration-count: infinite, infinite !important;
  animation-delay:
    -30s,
    -30s !important;
}

/* 별 크기 정의 - 1픽셀과 2픽셀 두 종류 */
.size-1 {
  width: 1px;
  height: 1px;
}

.size-2 {
  width: 2px;
  height: 2px;
}

/* ----- 별 애니메이션 정의 ----- */
/**
 * 각 별의 애니메이션 클래스 생성 (axis-1부터 axis-360까지)
 * - 각 별마다 이동 방향과 페이드인 애니메이션 적용
 * - 랜덤한 시간으로 애니메이션 지속 시간 설정 (5초~45초)
 */
@for $i from 1 to 361 {
  $t: random(40000) + 5000; // 5000ms(5초)~45000ms(45초) 사이 랜덤 시간
  $angle: $i - reminder($i, 4);

  .axis-#{$i} {
    animation:
      anim#{$angle} #{$t}ms,
      // 별의 이동 애니메이션
      fade#{random(10)}
        #{$t}ms; // 페이드인 애니메이션 (10개 중 랜덤 선택)
  }
}

/**
 * 페이드인 애니메이션 정의 (fade1부터 fade10까지)
 * - 각 애니메이션마다 다른 시작 시간에 나타나기 시작함
 * - 0~20% 사이 랜덤 지점에서 시작해 10% 후에 완전히 보이게 됨
 */
@for $i from 1 to 11 {
  $start: random(20); // 0~20% 사이 랜덤 시작점
  $end: $start + 10; // 시작점 + 10%에 완전히 표시
  @keyframes fade#{$i} {
    #{$start + "%"} {
      opacity: 0; // 시작점에서는 투명
    }
    #{$end + "%"} {
      opacity: 1; // 종료점에서는 완전히 보임
    }
    100% {
      opacity: 1; // 애니메이션 끝까지 계속 보임
    }
  }
}

/**
 * 별 이동 경로 애니메이션 정의 (anim4, anim8, ..., anim360)
 * - 4도 간격으로 90개의 서로 다른 방향 애니메이션 생성
 * - 삼각함수(sin, cos)를 사용해 원형 패턴으로 퍼져나가도록 계산
 * - 별들은 화면 중앙에서 화면 너비의 80%, 높이의 80%까지 이동
 */
@for $i from 1 to 91 {
  $a: $i * 4; // 4도 간격 (4, 8, 12, ..., 360)
  @keyframes anim#{$a} {
    $angle: $pi * 2 * ($a / 360); // 라디안 각도로 변환
    $y: 80 * sin($angle); // Y축 이동 거리 (뷰포트 높이의 -80%~80%)
    $x: 80 * cos($angle); // X축 이동 거리 (뷰포트 너비의 -80%~80%)
    100% {
      transform: translate(#{$x}vw, #{$y}vh); // 화면 비율에 맞게 이동
    }
  }
}
